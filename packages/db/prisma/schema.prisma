generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String                @id @default(cuid())
  firebaseUid   String                @unique
  email         String                @unique
  name          String?
  role          Role                  @default(USER)
  planId        String?
  plan          SubscriptionPlan?     @relation(fields: [planId], references: [id])
  folders       Folder[]
  files         File[] // Add this relation
  storageUsed   BigInt?               @default(0) // in bytes
  createdAt     DateTime?             @default(now())
  updatedAt     DateTime?             @updatedAt
  subscriptions SubscriptionHistory[]

  @@index([email])
  @@index([firebaseUid])
  @@map("users")
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
  files     File[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
  @@map("folders")
}

model File {
  id         String   @id @default(cuid())
  filename   String
  cloudUrl   String   @unique
  size       Int
  type       FileType
  owner      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String
  folder     Folder?  @relation(fields: [folderId], references: [id], onDelete: SetNull) // Change onDelete
  folderId   String? //  Optional when file is in trash
  mimeType   String
  uploadedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // flag that indicates if the file is in trash or not
  isInTrash Boolean @default(false)

  // Metadata for restoration
  originalFolderId String? // Where to restore the file
  deletedAt        DateTime? // When it was deleted

  @@index([ownerId])
  @@index([folderId])
  @@index([type])
  @@index([uploadedAt])
  @@index([mimeType])
  @@map("files")
}

model SubscriptionPlan {
  id                  String                @id @default(cuid())
  type                Plan                  @default(FREE)
  price               Int                   @default(0)
  storageLimit        BigInt                @default(1073741824) // in bytes
  features            String[]              @default([]) // List of features included in the plan
  // durationInDays     Int                   @default(30) // Duration of the plan in days
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  User                User[]
  SubscriptionHistory SubscriptionHistory[]

  @@map("subscription_plans") // Consistent table naming
}

model SubscriptionHistory {
  id            String           @id @default(cuid())
  userId        String
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId        String
  plan          SubscriptionPlan @relation(fields: [planId], references: [id])
  startDate     DateTime         @default(now())
  endDate       DateTime? // null = currently active subscription
  transactionId String?          @unique
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([userId])
  @@index([planId])
  @@index([startDate]) // For date range queries
  @@index([endDate]) // For finding active subscriptions
  @@map("subscription_history")
}

enum Role {
  USER
  ADMIN
}

enum FileType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}
